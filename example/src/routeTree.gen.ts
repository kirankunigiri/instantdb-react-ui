/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RoomsLayoutImport } from './routes/rooms/layout'
import { Route as PeopleLayoutImport } from './routes/people/layout'
import { Route as ItemsLayoutImport } from './routes/items/layout'
import { Route as IndexImport } from './routes/index'
import { Route as AboutIndexImport } from './routes/about/index'
import { Route as PeopleIdImport } from './routes/people/$id'
import { Route as ItemsIdImport } from './routes/items/$id'

// Create/Update Routes

const RoomsLayoutRoute = RoomsLayoutImport.update({
  id: '/rooms',
  path: '/rooms',
  getParentRoute: () => rootRoute,
} as any)

const PeopleLayoutRoute = PeopleLayoutImport.update({
  id: '/people',
  path: '/people',
  getParentRoute: () => rootRoute,
} as any)

const ItemsLayoutRoute = ItemsLayoutImport.update({
  id: '/items',
  path: '/items',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AboutIndexRoute = AboutIndexImport.update({
  id: '/about/',
  path: '/about/',
  getParentRoute: () => rootRoute,
} as any)

const PeopleIdRoute = PeopleIdImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => PeopleLayoutRoute,
} as any)

const ItemsIdRoute = ItemsIdImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => ItemsLayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/items': {
      id: '/items'
      path: '/items'
      fullPath: '/items'
      preLoaderRoute: typeof ItemsLayoutImport
      parentRoute: typeof rootRoute
    }
    '/people': {
      id: '/people'
      path: '/people'
      fullPath: '/people'
      preLoaderRoute: typeof PeopleLayoutImport
      parentRoute: typeof rootRoute
    }
    '/rooms': {
      id: '/rooms'
      path: '/rooms'
      fullPath: '/rooms'
      preLoaderRoute: typeof RoomsLayoutImport
      parentRoute: typeof rootRoute
    }
    '/items/$id': {
      id: '/items/$id'
      path: '/$id'
      fullPath: '/items/$id'
      preLoaderRoute: typeof ItemsIdImport
      parentRoute: typeof ItemsLayoutImport
    }
    '/people/$id': {
      id: '/people/$id'
      path: '/$id'
      fullPath: '/people/$id'
      preLoaderRoute: typeof PeopleIdImport
      parentRoute: typeof PeopleLayoutImport
    }
    '/about/': {
      id: '/about/'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

interface ItemsLayoutRouteChildren {
  ItemsIdRoute: typeof ItemsIdRoute
}

const ItemsLayoutRouteChildren: ItemsLayoutRouteChildren = {
  ItemsIdRoute: ItemsIdRoute,
}

const ItemsLayoutRouteWithChildren = ItemsLayoutRoute._addFileChildren(
  ItemsLayoutRouteChildren,
)

interface PeopleLayoutRouteChildren {
  PeopleIdRoute: typeof PeopleIdRoute
}

const PeopleLayoutRouteChildren: PeopleLayoutRouteChildren = {
  PeopleIdRoute: PeopleIdRoute,
}

const PeopleLayoutRouteWithChildren = PeopleLayoutRoute._addFileChildren(
  PeopleLayoutRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/items': typeof ItemsLayoutRouteWithChildren
  '/people': typeof PeopleLayoutRouteWithChildren
  '/rooms': typeof RoomsLayoutRoute
  '/items/$id': typeof ItemsIdRoute
  '/people/$id': typeof PeopleIdRoute
  '/about': typeof AboutIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/items': typeof ItemsLayoutRouteWithChildren
  '/people': typeof PeopleLayoutRouteWithChildren
  '/rooms': typeof RoomsLayoutRoute
  '/items/$id': typeof ItemsIdRoute
  '/people/$id': typeof PeopleIdRoute
  '/about': typeof AboutIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/items': typeof ItemsLayoutRouteWithChildren
  '/people': typeof PeopleLayoutRouteWithChildren
  '/rooms': typeof RoomsLayoutRoute
  '/items/$id': typeof ItemsIdRoute
  '/people/$id': typeof PeopleIdRoute
  '/about/': typeof AboutIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/items'
    | '/people'
    | '/rooms'
    | '/items/$id'
    | '/people/$id'
    | '/about'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/items'
    | '/people'
    | '/rooms'
    | '/items/$id'
    | '/people/$id'
    | '/about'
  id:
    | '__root__'
    | '/'
    | '/items'
    | '/people'
    | '/rooms'
    | '/items/$id'
    | '/people/$id'
    | '/about/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ItemsLayoutRoute: typeof ItemsLayoutRouteWithChildren
  PeopleLayoutRoute: typeof PeopleLayoutRouteWithChildren
  RoomsLayoutRoute: typeof RoomsLayoutRoute
  AboutIndexRoute: typeof AboutIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ItemsLayoutRoute: ItemsLayoutRouteWithChildren,
  PeopleLayoutRoute: PeopleLayoutRouteWithChildren,
  RoomsLayoutRoute: RoomsLayoutRoute,
  AboutIndexRoute: AboutIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/items",
        "/people",
        "/rooms",
        "/about/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/items": {
      "filePath": "items/layout.tsx",
      "children": [
        "/items/$id"
      ]
    },
    "/people": {
      "filePath": "people/layout.tsx",
      "children": [
        "/people/$id"
      ]
    },
    "/rooms": {
      "filePath": "rooms/layout.tsx"
    },
    "/items/$id": {
      "filePath": "items/$id.tsx",
      "parent": "/items"
    },
    "/people/$id": {
      "filePath": "people/$id.tsx",
      "parent": "/people"
    },
    "/about/": {
      "filePath": "about/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
